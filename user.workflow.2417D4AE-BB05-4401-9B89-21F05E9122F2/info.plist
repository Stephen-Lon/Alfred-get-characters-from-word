<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.alfredapp.src.getchars</string>
	<key>category</key>
	<string>Utilities</string>
	<key>connections</key>
	<dict>
		<key>60BE325B-27DB-4CD7-8C74-1943C7C2DE9C</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>A6AA83F5-FC04-49F8-B83A-F3898C5FDAE1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>A6AA83F5-FC04-49F8-B83A-F3898C5FDAE1</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>E45B9235-8B5F-4969-B6D8-0CDEBA12EB30</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Stephen Christy</string>
	<key>description</key>
	<string>Get characters from word on clipboard</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Get chars</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>try	-- get the word from the clipboard	set theWord to the clipboard	-- keep it as a title to the dialogue	set titleWord to theWord	-- split the word into characters as a list	set listChars to characters of theWord as list	-- get the length of the character list	set lenList to length of listChars	-- an empty variable to store the characters we need	set existingChars to ""	-- set a default answer to demonstrate correct input	set dAnswer to "1 3 6"	-- ensure the dialogue shows the word and max. no. of characters	set userEntry to display dialog ¬		"Enter the 3 numbers of the characters you want from " &amp; "'" &amp; titleWord &amp; "'" &amp; " with a space between each:" default answer dAnswer with title "Get characters from " &amp; "'" &amp; titleWord &amp; "'" &amp; "(" &amp; "max. " &amp; lenList &amp; " characters" &amp; ")"	-- get the dialogue input	set dAnswer to text returned of userEntry	set astid to AppleScript's text item delimiters	-- we are splitting the input numbers by the space character	set AppleScript's text item delimiters to " "	-- create a list of the input numbers	set answerList to text items of dAnswer	set AppleScript's text item delimiters to astid	-- set variable to check the last number input is not &gt; than number of characters in word	set overFlow to item -1 of answerList as integer	-- check the last input number isn't greater than number of characters in the word	if overFlow is greater than lenList then		error "There are not " &amp; overFlow &amp; " characters in " &amp; "'" &amp; titleWord &amp; "'"	end if	-- now loop for each number in input	repeat with i from 1 to (length of answerList)		-- set each number against the appropriate character of the word		set seekChar to item i of answerList as integer		if existingChars is "" then			set existingChars to item seekChar of listChars		else			-- add it if we already have a character			set existingChars to existingChars &amp; " " &amp; item seekChar of listChars		end if	end repeat	return existingChars	on error error_message number error_number
	if error_number is -1700 then 
	set error_message to "Please ensure there is only a space between the numbers"
	return error_message	else	if the error_number is not -128 then return error_message	-- substitute the following line if not running in an Alfred workflow	-- if the error_number is not -128 then display alert "Error" message error_message as warning
	end ifend try</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>6</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>A6AA83F5-FC04-49F8-B83A-F3898C5FDAE1</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alignment</key>
				<integer>0</integer>
				<key>backgroundcolor</key>
				<string></string>
				<key>fadespeed</key>
				<integer>0</integer>
				<key>fillmode</key>
				<integer>1</integer>
				<key>font</key>
				<string>System Light</string>
				<key>ignoredynamicplaceholders</key>
				<false/>
				<key>largetypetext</key>
				<string>{query}</string>
				<key>textcolor</key>
				<string></string>
				<key>wrapat</key>
				<integer>20</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.largetype</string>
			<key>uid</key>
			<string>E45B9235-8B5F-4969-B6D8-0CDEBA12EB30</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>gc</string>
				<key>subtext</key>
				<string>Get characters from the word on the clipboard</string>
				<key>text</key>
				<string>Get chars</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>60BE325B-27DB-4CD7-8C74-1943C7C2DE9C</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>readme</key>
	<string># Usage

This workflow gets specified characters from a word *already on the clipboard*. You specify what characters you want by their position (e.g., `2 5 6`) and the workflow displays the relevant characters in large type.

It is useful for logins to websites that require, e.g., "The first, third and fourth characters of your favourite place" or "The second, fourth and fifth characters of your mother's maiden name". It also works with characters from date strings (e.g., `21092021`). *In any of those cases you would copy the relevant word from your password manager and then run this workflow.*

The workflow uses the default keyword "gc" (with no space afterwards) for "get characters".</string>
	<key>uidata</key>
	<dict>
		<key>60BE325B-27DB-4CD7-8C74-1943C7C2DE9C</key>
		<dict>
			<key>note</key>
			<string>Gets characters (in given positions—e.g., 2, 5, 6) from word on clipboard and displays selected three characters in large text. Used for logins that require selected characters from, e.g., special place, special name.</string>
			<key>xpos</key>
			<real>40</real>
			<key>ypos</key>
			<real>15</real>
		</dict>
		<key>A6AA83F5-FC04-49F8-B83A-F3898C5FDAE1</key>
		<dict>
			<key>xpos</key>
			<real>255</real>
			<key>ypos</key>
			<real>15</real>
		</dict>
		<key>E45B9235-8B5F-4969-B6D8-0CDEBA12EB30</key>
		<dict>
			<key>xpos</key>
			<real>480</real>
			<key>ypos</key>
			<real>15</real>
		</dict>
	</dict>
	<key>userconfigurationconfig</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string></string>
				<key>placeholder</key>
				<string></string>
				<key>required</key>
				<false/>
				<key>trim</key>
				<true/>
			</dict>
			<key>description</key>
			<string>The default keyword to run this workflow is "gc" (for "get characters"). You can change it here.</string>
			<key>label</key>
			<string>Workflow keyword</string>
			<key>type</key>
			<string>textfield</string>
			<key>variable</key>
			<string></string>
		</dict>
	</array>
	<key>version</key>
	<string>1.0</string>
	<key>webaddress</key>
	<string></string>
</dict>
</plist>
